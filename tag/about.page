---
title: Tag
description: List all pages in the current folder filtered by tag.
icon: 'M5.5,9A1.5,1.5 0 0,0 7,7.5A1.5,1.5 0 0,0 5.5,6A1.5,1.5 0 0,0 4,7.5A1.5,1.5 0 0,0 5.5,9M17.41,11.58C17.77,11.94 18,12.44 18,13C18,13.55 17.78,14.05 17.41,14.41L12.41,19.41C12.05,19.77 11.55,20 11,20C10.45,20 9.95,19.78 9.58,19.41L2.59,12.42C2.22,12.05 2,11.55 2,11V6C2,4.89 2.89,4 4,4H9C9.55,4 10.05,4.22 10.41,4.58L17.41,11.58M13.54,5.71L14.54,4.71L21.41,11.58C21.78,11.94 22,12.45 22,13C22,13.55 21.78,14.05 21.42,14.41L16.04,19.79L15.04,18.79L20.75,13L13.54,5.71Z'
author: Taufik Nurrohman
type: Markdown
version: 2.0.0

use:
  '.\lot\x\page': 1
...

This extension activates the tag feature by utilizing the `kind` property of the page. This extension will also add several new routes such as `http://127.0.0.1/blog/tag/:tag/1` on every page to allow users to list all pages in the current folder by a tag.

### Working with Tags

[Panel](https://github.com/mecha-cms/x.panel) extension can help you to automate everything. But, if you have to, you can still make this extension work even without the GUI feature. Before we start, you need to know how this extension works.

#### Page Properties

Get to know that this extension adds `query` and `tags` properties to the page only if the page contains `kind` property that is not empty:

~~~ .php
$page = Page::__set_state([
    …
    …
    'kind' => [1, 2, 3], // [^1]
    'query' => ['foo', 'bar', 'baz'], // [^2]
    'tags' => Tags::__set_state([ // [^3]
        'foo' => Tag::__set_state([
            …
            …
            'id' => 1,
            'link' => 'http://127.0.0.1/tag/foo/1',
            'name' => 'foo'
        ]),
        'bar' => Tag::__set_state([
            …
            …
            'id' => 2,
            'link' => 'http://127.0.0.1/tag/bar/1',
            'name' => 'bar'
        ]),
        'baz' => Tag::__set_state([
            …
            …
            'id' => 3,
            'link' => 'http://127.0.0.1/tag/baz/1',
            'name' => 'baz'
        ])
    ])
]);

// [^1]: These numbers will be used as the tag ID.
// [^2]: These queries are generated automatically based on the available tags.
// [^3]: These rich tags data are also generated based on the available tags.
~~~

#### File Structure

Writing a tag file is the same as writing a page file. The only difference is that you must write the `id` property separately from the page:

~~~ .txt
.\
└── lot\
    └── tag\
        ├── bar\
        │   └── id.data
        ├── baz\
        │   └── id.data
        ├── foo\
        │   └── id.data
        ├── bar.page
        ├── baz.page
        └── foo.page
~~~

#### File Content

Make sure to specify a unique number for each `id.data` file. These numbers, then will be used to connect the tag file with the `kind` property on every page.

Here’s an example of a tag file content:

~~~ .yaml
---
title: Tag Name
description: Short description about this tag.
...

Long description about this tag.
~~~

#### Connections

To connect between tags with the current page, create a `kind.data` file in the corresponding folder, containing a list of tag’s ID written in a valid JSON format:

~~~ .txt
.\
└── lot\
    └── page\
        ├── test-page\
        │   └── kind.data
        └── test-page.page
~~~

Example content of `kind.data` file:

~~~ .json
[1, 2, 3]
~~~

You can actually insert the `kind` property in the page header, but this method is a little inefficient in terms of performance:

~~~ .yaml
---
title: Page Title
description: Page description.
author: Taufik Nurrohman
type: Markdown
kind: [1, 2, 3]
...

Page content goes here.
~~~

---

### Variables

A global variable `$tag` will be available in tags page mode. This variable is an instance of the `Tag` class which you can use to get the current tag details.

~~~ .php
if ($site->is('tags')) {
    echo i('Current tag is %s.', [$tag->title]);
}
~~~

### Conditions

These page conditional statements are available:

 - `$site->is('tags')` → Return `true` if current items view is a tags view and is not empty.

### Classes

These HTML classes will be added to the `<html>` element that has a `class` attribute:

 - `is:tags` → Will be added if current items view is a tags view and is not empty.